package decomposition;

import java.util.Scanner;

//1. Треугольник задан координатами своих вершин. Написать метод для вычисления его площади.
public class Task1 {
	public static void main(String[] args) {
		System.out.println("Введите точки x1, y1, x2, y2, x3, y3");
		Scanner s = new Scanner(System.in);
		double x1, y1, x2, y2, x3, y3;
		double a, b, c;
		double st;
		x1 = s.nextDouble();
		y1 = s.nextDouble();
		x2 = s.nextDouble();
		y2 = s.nextDouble();
		x3 = s.nextDouble();
		y3 = s.nextDouble();
		a = lineOfPoint(x1, y1, x2, y2);
		b = lineOfPoint(x2, y2, x3, y3);
		c = lineOfPoint(x3, y3, x1, y1);
		st = sTriangle(a, b, c);
		System.out.println("S= " + st);

	}

	static double lineOfPoint(double a, double b, double c, double d) {
		double line;
		line = (Math.sqrt(Math.pow((c - a), 2) + (Math.pow((d - b), 2))));
		return line;
	}

	static double sTriangle(double a, double b, double c) {
		double st;
		double p;
		p = (a + b + c) / 2;
		st = Math.sqrt(p * (p - a) * (p - b) * (p - c));

		return st;
	}
}

// 2. Написать метод(методы) для нахождения наибольшего общего делителя и
// наименьшего общего кратного двух
// натуральных чисел:
class Task2 {
	public static void main(String[] args) {
		System.out.println("Введите а , b");
		Scanner s = new Scanner(System.in);
		int a, b;
		a = s.nextInt();
		b = s.nextInt();
		int nod, nok;
		nod = nodGet(a, b);
		nok = nokGet(a, b);
		System.out.println("НОД = " + nod);
		System.out.println("НОК =" + nok);
	}

	static int nodGet(int a, int b) {
		int ie;
		int n;
		n = 1;
		if (a > b) {
			ie = b;
		} else {
			ie = a;
		}
		for (int i = 1; i <= ie; i++) {
			if (a % i == 0 && b % i == 0) {
				n = i;
			}
		}

		return n;
	}

	static int nokGet(int a, int b) {
		int n;
		n = (a * b) / nodGet(a, b);
		return n;
	}

}

// 3. Написать метод(методы) для нахождения наибольшего общего делителя четырех
// натуральных чисел.
class Task3 {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int a, b, c, d;
		int nod = 1;
		System.out.println("Введите a, b, c, d");
		a = s.nextInt();
		b = s.nextInt();
		c = s.nextInt();
		d = s.nextInt();

		for (int i = 1; i <= getMin(a, b, c, d); i++) {
			if (chekAll(a, b, c, d, i)) {
				nod = i;
			}
		}
		System.out.println(nod);
	}

	static int getMin(int a, int b, int c, int d) {
		int arr[] = { a, b, c, d };
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length - 1; j++) {
				int temp;
				if (arr[j] > arr[j + 1]) {
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		return arr[0];
	}

	static int nodFour(int a, int b, int c, int d) {
		int nod = 1;
		for (int i = 0; i <= getMin(a, b, c, b); i++) {
		}
		return nod;
	}

	static boolean chekAll(int a, int b, int c, int d, int i) {
		boolean flag = false;
		if (a % i == 0 && b % i == 0 && c % i == 0 && d % i == 0) {
			flag = true;
		}
		return flag;
	}
}

// 4. Написать метод(методы) для нахождения наименьшего общего кратного трех
// натуральных чисел.
class Task4 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int a, b, c;
		int nok;
		System.out.println("Введите a, b, c");
		a = sc.nextInt();
		b = sc.nextInt();
		c = sc.nextInt();
		nok = searchNOK(a, b, c);
		System.out.println("НОК " + a + " , " + b + " , " + c + " равен : " + nok);

	}

	static int getIndex(int a, int b, int c) {

		int temp = a;
		if (a < b)
			temp = b;
		if (c > b && c > a)
			temp = c;

		return temp;
	}

	static int searchNOK(int a, int b, int c) {
		int nok = 1;
		for (int i = getIndex(a, b, c); i <= a * b * c; i++) {
			if (i % a == 0 && i % b == 0 && i % c == 0) {
				nok = i;
				break;
			}

		}
		return nok;
	}
}

// 5. Написать метод(методы) для нахождения суммы большего и меньшего из трех
// чисел.
class Task5 {
	public static void main(String[] args) {
		System.out.println("Введите a, b, c");
		Scanner s = new Scanner(System.in);
		int a, b, c, summ;
		a = s.nextInt();
		b = s.nextInt();
		c = s.nextInt();
		summ = summMaxMin(a, b, c);
		System.out.println("Сумма большего и меньшего числа = " + summ);
	}

	static int summMaxMin(int a, int b, int c) {
		int summ;
		int temp;
		temp = a;
		summ = 0;
		if (b > a)
			temp = b;
		if (c > b && c > a)
			temp = c;
		summ = summ + temp;
		temp = a;
		if (b < a)
			temp = b;
		if (c < b && c < a)
			temp = c;
		summ = summ + temp;
		return summ;
	}
}

// 6. Вычислить площадь правильного шестиугольника со стороной а, используя
// метод вычисления площади
// треугольника.
class Task6 {
	public static void main(String[] args) {
		double a;

		double s;
		System.out.println("Введите сторону правильного шестиугольника");
		Scanner scanner = new Scanner(System.in);
		a = scanner.nextDouble();
		s = 6 * sTrian(a);
		System.out.println("Площадь такого шестиугольника : " + s);

	}

	static double sTrian(double a) {
		double s;

		s = (Math.pow(a, 2) * Math.sqrt(3)) / 4;
		return s;

	}
}

// 7. На плоскости заданы своими координатами n точек. Написать метод(методы),
// определяющие, между какими из
// пар точек самое большое расстояние. Указание. Координаты точек занести в
// массив.
class Task7 {
	public static void main(String[] args) {
		System.out.println("Последовательно через пробел введите координаты х и у всех точек");
		String str;
		Scanner sc = new Scanner(System.in);
		str = sc.nextLine();
		int[][] xy = stringToArray(str);

		double l = 0;
		double temp;
		for (int h = 0; h < xy.length; h++) {
			for (int j = 0; j < xy.length; j++) {

				temp = lineLength(xy[j][0], xy[j][1], xy[h][0], xy[h][1]);
				if (temp > l) {
					l = temp;
				}

			}

		}
		System.out.println("Максимальное расстояние между точками : " + l);

	}

	static int[][] stringToArray(String a) {

		String[] cList;
		cList = a.split(" ");

		int[][] arr = new int[cList.length / 2][2];
		for (int i = 0; i < cList.length - 1; i++) {
			if (i % 2 != 0) {
				arr[(i - 1) / 2][0] = Integer.parseInt(cList[i]);

			} else {
				arr[i / 2][1] = Integer.parseInt(cList[i]);
			}

		}
		return arr;

	}

	static double lineLength(int x1, int y1, int x2, int y2) {
		double a = 0;
		a = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
		return a;
	}
}

// 8. Составить программу, которая в массиве A[N] находит второе по величине
// число (вывести на печать число,
// которое меньше максимального элемента массива, но больше всех других
// элементов).
class Task8 {
	public static void main(String[] args) {
		int wanted = 0;
		boolean w = false;
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = (int) (Math.random() * 10) + 1;

		}
		for (int vision : arr) {
			System.out.print(vision + " ");

		}
		int max = 0;
		for (int temp : arr) {
			if (temp > max) {
				max = temp;
			}

		}
		System.out.println("Максимальная цифра: " + max);

		int a = max - 1;
		while (!w) {
			for (int t = arr.length - 1; t >= 0; t--) {
				if (arr[t] == a) {
					wanted = a;
					w = true;
					break;
				}
			}
			a--;
		}
		if (w) {
			System.out.println("Искомая цифра: " + wanted);
		} else {
			System.out.println("Все цифры равны");
		}
	}
}

// 9. Написать метод(методы), проверяющий, являются ли данные три числа взаимно
// простыми.
class Task9 {
	public static void main(String[] args) {
		System.out.println("Введите а, b, c");
		Scanner s = new Scanner(System.in);
		int a, b, c;
		a = s.nextInt();
		b = s.nextInt();
		c = s.nextInt();
		System.out.println("Числа взаимно простые: " + chek(a, b, c));

	}

	static int maxInd(int a, int b, int c) {
		int i = a;
		if (b > a) {
			i = b;
		}
		if (c > b && c > a) {
			i = c;
		}
		return i;

	}

	static boolean chek(int a, int b, int c) {
		boolean flag = true;
		for (int i = maxInd(a, b, c); i > 1; i--) {
			if (a % i == 0 && b % i == 0 && c % i == 0) {
				flag = false;
				break;
			}

		}
		return flag;
	}
}

// 10. Написать метод(методы) для вычисления суммы факториалов всех нечетных
// чисел от 1 до 9.
class Task10 {
	public static void main(String[] args) {
		int m;
		m = 9;

		for (int i = 0; i <= m; i++) {
			if (i % 2 != 0) {

				prn(i, factorial(i));
			}
		}

	}

	public static int factorial(int a) {
		int n;
		n = 1;
		int k = 1;
		for (int i = 0; i < a; i++) {
			n = n * k;
			k++;
		}
		return n;
	}

	static void prn(int a, int b) {
		System.out.println("Факториал числа " + a + ": " + b);
	}
}

// 11. Задан массив D. Определить следующие суммы: D[l] + D[2] + D[3]; D[3] +
// D[4] + D[5]; D[4] +D[5] +D[6].
// Пояснение. Составить метод(методы) для вычисления суммы трех последовательно
// расположенных элементов
// массива с номерами от k до m.
class Task11 {
	public static void main(String[] args) {
		int ind;
		int[] arr = { 1, 8, 7, 9, 7, 5, 4, 3, 2, 0 };
		System.out.print("Массив");
		for (int v : arr) {
			System.out.print(" " + v);
		}
		System.out.println();
		System.out.println("Введите начальный индекс");
		Scanner sc = new Scanner(System.in);
		ind = sc.nextInt();
		System.out.println("Сумма элементов = " + sumOfThree(arr, ind));

	}

	static int sumOfThree(int arr[], int index) {
		int sum;
		sum = 0;
		for (int i = index; i < index + 3; i++) {
			sum = sum + arr[i];
		}
		return sum;
	}
}

// 12. Даны числа X, Y, Z, Т — длины сторон четырехугольника. Написать
// метод(методы) вычисления его площади,
// если угол между сторонами длиной X и Y— прямой.
class Task12 {
	public static void main(String[] args) {
		int x, y, z, t;
		System.out.println("Введите величины сторон прямоугольника");
		Scanner sc = new Scanner(System.in);
		x = sc.nextInt();
		y = sc.nextInt();
		z = sc.nextInt();
		t = sc.nextInt();
		System.out.println(square(x, y, z, t));
		System.out.println("или");
		System.out.println(square2(x, y, z, t));
	}

	public static double square(int a, int b, int c, int d) {
		double g1;
		double s1;
		double g2;
		double s2;
		double p;
		double p2;
		double s;
		g1 = Math.sqrt(a * a + b * b);
		p = (a + b + g1) / 2;
		s1 = Math.sqrt(p * (p - a) * (p - b) * (p - g1));
		g2 = Math.sqrt(c * c + d * d);
		p2 = (c + d + g2) / 2;
		if (g1 != g2)
			System.exit(00);
		s2 = Math.sqrt(p2 * (p - c) * (p - d) * (p - g2));
		s = s1 + s2;
		return s;
	}

	public static double square2(int a, int b, int c, int d) {
		double g1;
		double s1;
		double g2;
		double s2;
		double p;
		double p2;
		double s;
		g1 = Math.sqrt(a * a + b * b);
		p = (a + b + g1) / 2;
		s1 = Math.sqrt(p * (p - a) * (p - b) * (p - g1));

		p2 = (c + d + g1) / 2;

		s2 = Math.sqrt(p2 * (p - c) * (p - d) * (p - g1));
		s = s1 - s2;
		return s;
	}
}
// 13. Дано натуральное число N. Написать метод(методы) для формирования
// массива, элементами которого являются
// цифры числа N.

class Task13 {
	public static void main(String[] args) {
		System.out.println("Введите число");
		Scanner s = new Scanner(System.in);
		int a;
		a = s.nextInt();

		int arr[] = mass(a);
		System.out.println("Массив: ");
		for (int j : arr) {
			System.out.print(j + " ");
		}

	}

	public static int[] mass(int a) {
		int a1 = a;
		int l = 0;
		while (a1 > 0) {
			a1 = a1 / 10;
			l++;
		}
		int[] arr = new int[l];
		int[] arr1 = new int[l];
		for (int i = 0; i < l; i++) {
			arr[i] = a % 10;
			a = a / 10;
		}
		for (int j = 0; j < arr.length; j++) {
			arr1[j] = arr[arr.length - j - 1];

		}

		return arr1;
	}
}

// 14. Написать метод(методы), определяющий, в каком из данных двух чисел больше
// цифр.
class Task14 {
	public static void main(String[] args) {
		System.out.println("Введите два числа");
		Scanner s = new Scanner(System.in);
		int a, b;
		a = s.nextInt();
		b = s.nextInt();
		System.out.println(max(a, b));

	}

	public static String max(int a, int b) {
		String str = "";
		int an, bn;
		an = bn = 0;
		while (a > 0) {
			a = a / 10;
			an++;

		}
		while (b > 0) {
			b = b / 10;
			bn++;
		}
		if (an > bn) {
			str = "В первом";
		}
		if (bn > an) {
			str = "Во втором";
		}
		if (bn == an) {
			str = "Одинаково";
		}
		return str;
	}
}

// 15. Даны натуральные числа К и N. Написать метод(методы) формирования массива
// А, элементами которого
// являются числа, сумма цифр которых равна К и которые не большее N.
class Task15 {
	public static void main(String[] args) {
		int k, n;
		Scanner sc = new Scanner(System.in);
		System.out.println("Введите к , n");
		k = sc.nextInt();
		n = sc.nextInt();
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = randNK(k, n);

		}
		for (int v : arr) {
			System.out.print(v + " ");
		}

	}

	public static int randNK(int k, int n) {
		int temp;
		int ran;
		int r;
		int rtmp;
		for (;;) {
			temp = 0;
			ran = ran(n);
			rtmp = ran;
			while (ran > 0) {
				temp = ran % 10 + temp;
				ran = ran / 10;
			}

			if (temp == k) {
				r = rtmp;
				break;
			}
		}
		return r;
	}

	public static int ran(int n) {
		int r;
		r = (int) (Math.random() * n);
		return r;
	}
}

// 16. Два простых числа называются «близнецами», если они отличаются друг от
// друга на 2 (например, 41 и 43). Найти
// и напечатать все пары «близнецов» из отрезка [n,2n], где n - заданное
// натуральное число больше 2. Для решения
// задачи использовать декомпозицию.
class Task16 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n;
		System.out.println("Введите n");
		n = sc.nextInt();

		for (int i = n; i < 2 * n; i++) {

			if (chek(i) && (chek(i + 2) && (i + 2 < 2 * n))) {
				System.out.println(i + " " + (i + 2));
			}

		}
	}

	public static boolean chek(int a) {
		boolean chek = true;
		for (int i = 2; i < a; i++) {
			if (a % i == 0) {
				chek = false;
				break;

			}
		}

		return chek;
	}
}

// 17. Натуральное число, в записи которого n цифр, называется числом
// Армстронга, если сумма его цифр, возведенная
// в степень n, равна самому числу. Найти все числа Армстронга от 1 до k. Для
// решения задачи использовать
// декомпозицию.
class task17 {
	public static void main(String[] args) {
		int k;
		int n;
		Scanner s = new Scanner(System.in);
		System.out.println("Введите k , n");
		k = s.nextInt();
		n = s.nextInt();
		for (int i = 1; i <= k; i++) {
			if (chekArmstrong(i, sumNum(i), n)) {
				System.out.println(i);

			}

		}
	}

	public static int sumNum(int a) {
		int sum = 0;
		while (a > 0) {
			sum += a % 10;
			a = a / 10;
		}
		return sum;
	}

	public static boolean chekArmstrong(int a, int b, int n) {
		boolean flag = false;
		if (a == Math.pow(b, n))
			flag = true;
		return flag;
	}
}

// 18. Найти все натуральные n-значные числа, цифры в которых образуют строго
// возрастающую последовательность
// (например, 1234, 5789). Для решения задачи использовать декомпозицию.

public class Task18 {
	public static void main(String[] args) {
		int a;
		Scanner sc = new Scanner(System.in);
		a = sc.nextInt();
		for (int i = (int) Math.pow(10, a - 1); i < Math.pow(10, a); i++) {
			if (cheker(i)) {
				System.out.println(i);
			}

		}
	}

	public static boolean cheker(int a) {
		boolean printIt = false;
		int temp = a % 10;
		a = a / 10;

		while (a > 0) {
			if (temp == a % 10 + 1) {
				temp = a % 10;
				a = a / 10;
				printIt = true;
			} else {
				printIt = false;
				break;
			}
		}
		return printIt;
	}
}

// 19. Написать программу, определяющую сумму n - значных чисел, содержащих
// только нечетные цифры. Определить
// также, сколько четных цифр в найденной сумме. Для решения задачи использовать
// декомпозицию.
class Task19 {
	public static void main(String[] args) {
		int a;
		int summ = 0;
		Scanner sc = new Scanner(System.in);
		a = sc.nextInt();
		for (int i = (int) Math.pow(10, a - 1); i < Math.pow(10, a); i++) {

			if (inspector(i)) {
				summ = summ + i;
			}

		}

		System.out.println(summ);
		System.out.println(num2(summ));
	}

	private static boolean inspector(int a) {
		boolean add = true;

		while (a > 0) {
			if (a % 2 == 0) {
				add = false;
				break;

			}

			a = a / 10;

		}

		return add;
	}

	private static int num2(int a) {
		int num2 = 0;
		while (a > 0) {
			if (a % 2 == 0)
				num2++;
			a = a / 10;
		}

		return num2;

	}

}

// 20. Из заданного числа вычли сумму его цифр. Из результата вновь вычли сумму
// его цифр и т.д. Сколько таких
// действий надо произвести, чтобы получился нуль? Для решения задачи
// использовать декомпозицию.
class Task20 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();
		System.out.print(mainProcces(a));
	}

	public static int sumNum(int a) {
		int sum = 0;
		while (a > 0) {
			sum = sum + a % 10;
			a = a / 10;

		}
		return sum;
	}

	public static int mainProcces(int a) {
		int count = 0;
		while (a > 0) {
			a -= sumNum(a);
			count++;

		}

		return count;

	}
}
